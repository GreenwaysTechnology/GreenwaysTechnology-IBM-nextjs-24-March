					Next js


Software Req:

1.Node.js
2.VSCODE
3.Docker

PreKnowledge:

1.Javascript
2.React fundamentals

What you are going to learn?

1.Next js
2.REST api developement
3.Database Programming Using Prisma ORM Framework
4.GraphQl with Apollo Framework
5.Connecting Graphql with Apollo Framework

.......................................................................................................
					Next js
.......................................................................................................

What is a Next?
	 Next is a flexible React framework that gives you building blocks to create fast "web applications".

What is React?
         React is javascript lib to build "Single Page Web applications"


What is web app?
  Type of distributed app,deployed at server , accessed over network(internet) vi various network protocals like http,tcp,smtp...
  
  Web apps works based on request and response model.
  Web apps are hosted on server called web server.

Web server receives request , runs a program, that program returns response to the client.

Response would be document.
=>HTML

other responses types
XML,JSON,Documents,images,vidoes.........

What is web and why it was created?

  Tim Berners-Lee, a British scientist, invented the World Wide Web (WWW) in 1989, while working at CERN. The web was originally conceived and developed to meet the demand for automated information-sharing between scientists in universities and institutes around the world.

The first Web browser is line mode web browser,launched in 1992.


The first web server is NeXT computer

The first web page , lanuched http://info.cern.ch/hypertext/WWW/TheProject.html.


Types of Web application:

1.Static web applications - 1989 to 1995
    Hard coded html pages, Prepared html pages kept at server, the web server will send those html pages to clients - browsers
   Do you think Static web applications still exits?

 Yes!, but we dont prepare the html pages by hand.. rather we ask the server to prepare..



2.Dynamic Content generation application(1996 to till date)

  After 1995, many people thought that how we can use web for biz information system

 how to share biz informations via internet.
 Generally biz data is stored in databases , how to embed data base data into html pages

 1.web server need to talk to database
 2.web server need to prepare html pages based on database records
 3.Those information must be transported to web clients.

Web server core design to get client request and send html response to the client.

Along with web server, something was introduced called "Programming language runtime"


3.Web services-1998 to till date

 Rise of ECommerce, using internet and web how to exchange data between two biz organizations.
 The existing html technology was not suitable to send and recive data because html is just user interface document language.

 We need , data to be exechanged, thats where new data model was created called 'XML'
xml based web apps called web services.

soap protocal was created to transfer XML based documents "SOAP based webservices"

After 2005 soap based web services, started failing due to mobile computing.

New Web services  were designed called "RestFull Web services"

Restfull web services were used to build any type of data formats like json,xml,pdf,html etc...

The first run time was created based on "c" language called "CGI-comman Gate way interface" later instead of c language "PERL" language.


4.Client side web apps called "Single Page Web Apps"(2007 to till date)

Single page web apps are built using javascript at client side where as server side web services(REST apis) are used.

SPA Tech stack:
HTML 5,CSS 3, Javascript.
Frameworks build based on SPA

1.Angular js
2.react
3.vue js
............................................................................................
				React as SPA lib
............................................................................................

Reactjs was created by facebook , in order to build SPA applications for browsers.


Advantages of SPA:
1.Pages are created  at client side, so server load is completly removed
2.SPA reduces the lot of phsyical pages after deployment.
3.Clear separations of concerns.

Drawbacks of SPA:
.................

Pure client SPAs are problematic when the app is senstive to SEO and time-to concept
This is because the browser will recive a large empty HTML page and has to wait until the javascript is loaded before rendering any thing.

	    The brith of new Technology called  "SSR" -  Server Side Rendering
    ..................................................................................

I need SEO but at the same time, i want to use SPA as well.
We provides first class api to "render"  an SPA app into HTML strings on the server.

This allows server to send back already rendered HTML, allowing end users to see the content immediately while the javascript is being downloaded.

This process is called "hydration", the app is compiled at server side and sent to the client which will be  interactive.
............................................................................................
				Rendering Types
............................................................................................

What is Rendering?
   Render means preparation,HTML Page prepartion...

Rendering Types:
1.CSR- Client side Rendering.
   HTML Pages are prepared at client side - SPA Applications
2.SSR  -Server Side rendering
   HTML Pages are prepared at server side - Dynamic Content Generation applications.

Based on these rendering type, we can classify other rendering

1.Universal rendering /Hybrid Rendering
  Server + Client side , coimbing both rendering 

2.Full SSR and Partial SSR
    Partial SSR is nothing but only "index.html" is compiled at server , rest of the application is rendered at client side.
   Full SSR is nothing but "index.html" and other pages are compiled at server....
.............................................................................................
			When Rendering can happen
		     (when html pages are parepared)
.............................................................................................

1.Request time
2.Build time

1.Request time :
 When user types url 

  http://www.example.com/product--------------->Server Receives Request----Prepares Page--send   that page to client.

2.Build time
    Build is nothing but, preparing app for production.. before hosting we have to prepare the     app
  During build phase, we can prepare html pages/render html pages 

			SSG -  Static Site Generations

Building web sites/apps during build phase is called SSG.

Why SSG?
  Super fast page access

Based On SSG , There is specfication is available "JAM Stack"
...........................................................................................
			Drawback of SSG(JAMStack App)
..........................................................................................
If page has data, which is keep on changing, preparing a page "ahead of time", that causes problem. that means we cant generate page on demand...

Data changes rapidly , we need to enable request time page prepartion.
.........................................................................................................................................
			ISR - Incremental Static Rendenering
...........................................................................................

SSG - Build time or ahead of time
SSR - Request time

ISR = SSG + SSR - Build time + request time 
.............................................................................................

What is Nextjs?

  Next js is a framework that helps to build web apps of all types

 you can build Full SSR apps..
 you can build SSR With Request time
 you can build SSG with Build time -  JAMStacks
 you can build SSR with CSR  - Server + SPA - Hybrid rendering
 you can build rest apis also - Web services

Using Next you can build 
 Pure server side apps with database access, other external api access.....
..............................................................................................
		               Next js UI layer
.............................................................................................

Next js uses "react core features" to build UI layer...

React core features:
1.React compoent driven
2.React uses data mutation techniques like props and state
3.React uses event listeners for interactions
4.React hooks

Nextjs tech stack:

1.React as ui layer
2.Next does not recommend to use "redux"
3.Next uses api layer- rest api development
4.Next can talk to any database via orm frameworks...
..............................................................................................
			Next js Architecture:
.............................................................................................

Next js uses "Rust based build system" where as react uses web pack build ....

What is Rust?
 It is programming langugage, used to build Nextjs apps. Next core engine is written in Rust only.

Next.js Compiler:
..................
 Next js Compiler is written using RUST Using SWC (Speedy Web Compiler).

SWC allows next js to transform and minify the js code for production. This replaces babel.

SWC is 17x faster than Babel, it is embeded inside next js
...........................................................................................

....................................................................................
		NEXT JS Getting Started
.....................................................................................

How to install next js and how to create app?

System Req:

1.Node.js 16.8 or later
2.OS - any os
3.vs code.

How to create next js project?

G:\IBM\2024\March\Nextjs>npx create-next-app@latest
Need to install the following packages:
create-next-app@14.1.1
âˆš What is your project named? ... welcome-app
âˆš Would you like to use TypeScript? ... No / Yes
âˆš Would you like to use ESLint? ... No / Yes
âˆš Would you like to use Tailwind CSS? ... No / Yes
âˆš Would you like to use `src/` directory? ... No / Yes
âˆš Would you like to use App Router? (recommended) ... No / Yes
âˆš Would you like to customize the default import alias (@/*)? ... No / Yes
âˆš What import alias would you like configured? ... @/*
Creating a new Next.js app in G:\IBM\2024\March\Nextjs\welcome-app.

Using npm.

Initializing project with template: app-tw


Installing dependencies:
- react
- react-dom
- next

Installing devDependencies:
- autoprefixer
- postcss
- tailwindcss


added 137 packages, and audited 138 packages in 27s

34 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities
Success! Created welcome-app at G:\IBM\2024\March\Nextjs\welcome-app


G:\IBM\2024\March\Nextjs>cd welcome-app

G:\IBM\2024\March\Nextjs\welcome-app>


Lanuch VS code:

G:\IBM\2024\March\Nextjs\welcome-app>code .
..............................................................................................
			 Lets Explore the Project Structure
..............................................................................................
package.json
{
  "name": "welcome-app",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "react": "^18",
    "react-dom": "^18",
    "next": "14.1.1"
  },
  "devDependencies": {
    "autoprefixer": "^10.0.1",
    "postcss": "^8",
    "tailwindcss": "^3.3.0"
  }
}


Scripts:
 dev :  Runs next js dev to start next.js app in development mode
 build : runs next build to build the app for production usage
 start: runs next start to start next app in production mode
 lint: runs next lint to  verify the app's code correct ness.


next.config.mjs
/** @type {import('next').NextConfig} */
const nextConfig = {};

export default nextConfig;

 This files contains app configurations...

what is mjs?
    if you want to run "es 6  module" code on node js, which is not allowed by default.

if you want to run es 6 module code(export,import,export default)

Solution:
1.you have to convert es6 module code into commonjs , so that node can understand
2.you have to configure package.json 
   "type:module"
3.you have to save file with "fileName.mjs" extension.

Compiler Config:
................
jsconfig.json
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}

tailwind css configuration:(css)

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      backgroundImage: {
        "gradient-radial": "radial-gradient(var(--tw-gradient-stops))",
        "gradient-conic":
          "conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))",
      },
    },
  },
  plugins: [],
};

postcss.config.js
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};
...........................

public
 Stores static assets such as images,fonts,documents
 public dir are accessed inside code using the base URL "/"

src/app
  This is where all application code will go..

There are some ready made files are there.

layout.js
page.js
global.css

Note:
 Which is similar to index.js and App.js in react.
.............................................................................................

Start Next app:

:\IBM\2024\March\Nextjs\welcome-app>npm run dev

> welcome-app@0.1.0 dev
> next dev

   â–² Next.js 14.1.1
   - Local:        http://localhost:3000

Attention: Next.js now collects completely anonymous telemetry regarding usage.
This information is used to shape Next.js' roadmap and prioritize features.
You can learn more, including how to opt-out if you'd not like to participate in this anonymous program, by visiting the following URL:
https://nextjs.org/telemetry

 âœ“ Ready in 2.8s
 â—‹ Compiling / ...
 âœ“ Compiled / in 3.2s (511 modules)
 âœ“ Compiled in 290ms (241 modules)
 â—‹ Compiling /favicon.ico ...
 âœ“ Compiled /favicon.ico in 1439ms (518 modules)
.............................................................................................
			  Next App is Conventional Over Configuration
..............................................................................................

                           "In Next every folder and files are predefined"


In Next there is no predefined index.html, because index.html is generated by Next js server during request time or build time.

File Names:
src/app
 1.page.js
 2.layout.js

 These files names are predefiend file names we cant change file names as we wish.

Files have been designed based on conventional over configuratotion, meaning ever file has meaning.

page.js
   It is holding user interface, if the page.js is part of "src/app" folder which is root file(index.html) called as landing page.

layout.js
   It is going to hold root layout,Which is required file.


           "Every Nextjs app must have this "src/app/layout.js" file

What is this files are all about?

 "React Components"

Page Component - page.js
Layout Component - layout.js
.............................................................................................
			 React core features inside next js
.............................................................................................
1.Component:
   In react every thing is component, in next also the component driven arch is followed.

2.Props
    In react data is passed to the component via props.

Types of Props:
1.Data as prop
2.State as Prop -Dynamic Prop
3.function as Prop- Listeners as Prop
4.Component as Prop

Component as Props syntax we use heavily.

Syntax : Component Rendering:
...........................

<Tab /> - Self closing 
   There is no child element

<Tab>
   <Grid/> - Component as Prop
</Tab>

const Tab = props=>{

  return <>
	{props.children}
  </>
}

Next:

<Layout>
	?   ---> <Page/> -- Index Page
</Layout>

.....................................................................................
			 Every thing is component is in Next.js
.....................................................................................

Page Component:
  It is place holder component which displays ui.

Layout Component:
  It is container component which holds Page Component

           layout - parent
	  ------------------------------
          |                             |
                      Page -child       |
          |                             |
          |                             |
          |                             |
           -------------------------------

How to declare compoents?

 1.every component must be "functional component" - No Class Component.
 2.every component must be exported using "export default" only.
 3.Every Next application must have "root layout" src/app/layout.js
 4.Every Next application must have  "home/landing page" src/app/page.js

src/app/page.js


export default function HomePage() {

      return <div>
          <h1>Home Page</h1>
      </div>

}

Root Layout:
src/app/
export default function RootLayout(props) {

  return <html lang="en">
    {/* Insert page */}
    <body>{props.children}</body>
  </html>

}

<RootLayout>
   <HomePage/>
</RootLayout>
.....................................................................................
			  File Conventions
......................................................................................
layout.js
  Shared UI for a segment(page/router) and its children
  if a layout.js presents inside src/app folder which is called root layout.
  if every next.js app must have one layout.js which is root layout file.

nestedlayout -layout.js
   Shared UI for a a segement and its children
  when you define routing, that time we may or not use layout...

root layout vs nested layout:
  root layout must have <html>,nested layout <div> or section elements

eg:

 <html>
  <head></head>
  <title>title</title> 
   <body>
	<nested Layout>Insert Page</nestedLayout>
   </body>
 </html>

page.js
  Unique UI of a route,meaning the page is mapped against routing like "/",index,products,users,customers

loading.js
  Loading UI (Spinner) for a segement and its children

not-found.js
   Not Found UI for a segment and for its children
   if routing is failed to map against a page, then next.js will show error page.

error.js
  It is used to show custom component logic errors.
Note:
  All error files are represented by "React Error Boundary".

global-error.js
  It is to show app level errors.

template:
  Specailzied re-rendered layout UI.

route.js
  you can write "restfull" web services".

default.js
  Fallback UI for "Parrel Routes"
 
Note:
 When we write next application, every thing is component
  Error is component
  Loading is Compoent
  Page is component
  Layout is compoent.

Since Everything is compoent , which forms component hierachy.

React dev tool can used to look into the component hiearchy....

Using react dev tool we can look , next application....

Component Structure/Hierarchy:
..............................

<Layout>
   <Template>
	<ErrorBoundary fallback={<Error/>}>
	   <Suspense fallback={<Loading/>}>
		<ErrorBoundary fallback={<NotFound/>}
		    <Page/>	
		<ErrorBoundary>
           <Suspense>	
        </ErrorBoundary>
   </Template>	
</Layout>
....................................................................................
			   Routing
		       Pages and Layouts
....................................................................................

In Next js application routing is core concept, every thing is built on the top of routing only.

In Next js routing is in built.

The Skeleton of every next app is routing only.

Routing is mapped against folders and files only...

Inside the app directory, "folders" are used to define routes...

src/app/ ---- index route or home route.

http://localhost:3000/ ------->src/app/layout.js ---> page.js


Route Segment:

  Each folder represents a "route segment" that maps to a "URL" segement. in order to create route you can nest folders inside each other	

URL Pattern:

localhost:3000 /    
	       |
            Root segment

Segment means part of url.


localhost:3000 /     dashboard /settings
		|       |            |              
	Root segment  Segment   leaf Segment

How to create segments(eiether root/segement/leaf)?
  A special file called page.js to make route segments publicly accessible.

eg:

src/app/welcome/layout.js
// welcome page layout 

export default function WelcomeLayout({ children }) {
    return <div id="welcomelayout" style={{color:'red'}}>
        {children}
    </div>
}

src/app/welcome/page.js


export default function WelcomePage() {
    return <div>
        <h1>Welcome</h1>
    </div>
}

http://localhost/welcome

Nested Route:
src/app/welcome/hello/layout.js
export default function HelloLayout({ children }) {
    return <div id="hellolayout">
        {children}
    </div>
}
src/app/welcome/hello/page.js
export default function HelloPage(){
    return <>
        <h1>Hello Page</h1>
    </>
}

http://localhost:3000/welcome/hello
...................................................................................
			 Page Not found
..................................................................................
what if i have folder src/app/welcome/hai , but no page.js

http://localhost:3000/welcome/hai

You will get page not found, error

if no page.js found, then it will throw "404 Page Not Found" , that means next automatically fallback to "ErrorBoundary" , it maps against default notfound.js message.

What if i want custom NotFound Error page?

src/app/not-found.js

export default function NotFound() {
    return <h1>
        The Page you requested not available
    </h1>
}
....................................................................................
			    Public Access Route

if you have different name other than page.js , it will not be available for public access.

 app/settings/config.js

http://localhost:3000/settings/config - It will throw error.
....................................................................................
			  Pages and Other Components
....................................................................................

Layout is container, Page is mapped against route segement, which displays UI.

Can page hold other Components?

Yes

npx create-next-app@latest
Need to install the following packages:
create-next-app@14.1.2
Ok to proceed? (y) y
âˆš What is your project named? ... next-components
âˆš Would you like to use TypeScript? ... No / Yes
âˆš Would you like to use ESLint? ... No / Yes
âˆš Would you like to use Tailwind CSS? ... No / Yes
âˆš Would you like to use `src/` directory? ... No / Yes
âˆš Would you like to use App Router? (recommended) ... No / Yes
âˆš Would you like to customize the default import alias (@/*)? ... No / Yes
âˆš What import alias would you like configured? ... @/*

			    Co-location

In addition to special files, you have the option to colocate your own files (e.g. components, styles, tests, etc) inside folders in the app or any route  directory.


co-located file:
src/app/welcome/Greet.jsx
//here you can use export or export default .

export default function Greet(props) {
     return <>
        <h1>{props.message}</h1>
     </>
}

src/app/welcome/page.js
import Greet from "./Greet";

export default function WelcomePage(){
    return <>
       <Greet message="Hello"/>
    </>
}

src/app/welcome/layout.js
export default function WelcomeLayout({ children }) {
    return <div>
        {children}
    </div>
}
.....................................................................................
			Component Types and Rendering Types
.....................................................................................

Rendering is nothing but page preparation (html creation).

How to create html and where to create Html?

Where:
 rendering can take place in the server or on the client.

When:
  At Server side:
  It can happen either ahead of time at build time.
  or on every Request at runtime.

With next js , three types of rendering methods are available.

1.Server-side rendering
   1.0. Request time
   1.1. Static site Generation - build time
   1.2. ISR - Incremental Static rendering - first Build time and later runtime.

2.Client Rendering
   Preparing portion of page at client side , which is similar to SPA Apps.

Component types:
 Based on Rendering, we can classify the component into two category.

1.Server Component
   Server components are rendered at server side
2.Client components
   Clients components are rendered at client side

  By default all components are "Server Rendered Components"

   page,layouts,templates,notfound,loading,default all are server components only

Even When create custom components

export default function Greet(props) {
     return <>
        <h1>{props.message}</h1>
     </>
}
.....................................................................................
			Client Component
....................................................................................

Generally React application is component driven....
Component which may have logic to interact with user like button clicks,typing,animations,data fetch at client side any dom manipulation......

The components can be co-located..

Client components allow us to write interactive UI that is prendered on the server and can use client javascript to run in the browser.

Advantages of client Rendering:

1.Interactivity
   Client components uses "state,effects,event listener" , meaning they can provide immediate feedback to the user and update the UI.

2.Browser APIs:
   Client components have access the browser apis like Storage,geo location....

How to create Client Component?

src/app/reviews/page.js
import Like from "./like";

export default function ReviewPage(){
    return <>
        <h1>Review Page</h1>
        <Like/>
    </>
}

src/app/reviews/like.jsx
import { useState } from "react"

export default function Like() {
    //declare state
    const [like, setLike] = useState(0)

    return <div>
        <h3>Like {like}</h3>
    </div>
}

After this code, next is throwing compile time error...

./src/app/reviews/like.jsx
Error: 
  Ã— You're importing a component that needs useState. It only works in a Client Component but none of its parents are marked with "use client", so they're Server Components by default.
  â”‚ Learn more: https://nextjs.org/docs/getting-started/react-essentials
  â”‚ 
  â”‚ 
   â•­â”€[G:\IBM\2024\March\Nextjs\next-components\src\app\reviews\like.jsx:1:1]
 1 â”‚ import { useState } from "react"
   Â·          â”€â”€â”€â”€â”€â”€â”€â”€
 2 â”‚ 
 3 â”‚ export default function Like() {
 3 â”‚     //declare state
   â•°â”€â”€â”€â”€

Why this error?
  Server not able to render the above code, the reason is the code is subject to browser rendering, means that server does not how to treat this code.
 in order to compile this code, we need to convert this component into client component...
 we need to use directive called "use client"

solution:
 'use client'
import { useState } from "react"

export default function Like() {
    //declare state
    const [like, setLike] = useState(0)

    return <div>
        <h3>Like {like}</h3>
    </div>
}

How to mutate the state?
 Similar to react code...
 
'use client'
import { useState } from "react"

export default function Like() {
    //declare state
    const [like, setLike] = useState(0)

    const onLike = () => {
        setLike(like + 1)
    }

    return <div>
        <h3>Like {like}</h3>
        <button onClick={onLike}>Like</button>
    </div>
}

How to know the client component?

if component has 

1.useState hook
2.Any listener
3.useEffect hook

....................................................................................
		Patterns for client and server components

1.Server component uses client component...

2.Client component uses another server component

3.Client component uses another client component

1.Server Component uses client component:
.........................................

server:

src/app/reviews/page.js
import Like from "./like";

export default function ReviewPage(){
    return <>
        <h1>Review Page</h1>
        <Like/>
    </>
}
client component
src/app/reviews/like.jsx
'use client'
import { useState } from "react"

export default function Like() {
    //declare state
    const [like, setLike] = useState(0)

    const onLike = () => {
        setLike(like + 1)
    }

    return <div>
        <h3>Like {like}</h3>
        <button onClick={onLike}>Like</button>
    </div>
}

Note:
 if server uses client, the component must be marked with "use client" directive..
...................................................................................

2.Client component uses another server component.

  if client uses another server component, Server Component automatically becomes client component.
 when we use this pattern, we loose server rendering...


}

server:
src/app/reviews/Dislike.jsx
export default function DislikeServer() {
      return <div>
       <h1>Dislike Server</h1>
    </div>
}

Client:
src/app/reviews/reviewClient.jsx
'use client'
import { useState } from "react"
import DislikeServer from "./Dislike"

export default function MyReview() {
    //declare state
    const [like, setLike] = useState(0)

    const onLike = () => {
        setLike(like + 1)
    }

    return <div>
        <h3>Like {like}</h3>
        <button onClick={onLike}>Like</button>
        {/* Use server component */}
        <DislikeServer/>
    </div>

In the code, DislikeServer component runs in the client only....

What if client uses server component but at the same time, i dont want to loose server rendering feature?

Solution:

 Pass Server component as prop to Child Component..

<Client>
    <Server/>
</Client>

src/app/client/myserver.jsx
export default function MyServer(){
    return <div>
        <h1>Server Component</h1>
    </div>
}
src/app/client/myclient.jsx
'use client'

// import MyServer from "./myserver"

export default function MyClient(props){
    return <div>
        <h1>Client component</h1>
        {/* <MyServer></MyServer> */}
        {props.children}
    </div>
}

src/app/client/page.js
import MyClient from "./myclient";
import MyServer from "./myserver";

export default function ClientPage() {
    return <>
        <h1>Client Page</h1>
        <MyClient>
            {/* sending server as prop  */}
            <MyServer/>
        </MyClient>
    </>
}
....................................................................................

3.Client Uses another client Component...

Client uses another client.

src/app/myreviews/page.js
import MyReview from "./MyReview";

export default function Likes(){
    return <div>
        MyReview Page
        <MyReview></MyReview>
    </div>
}

Client:

src/app/myreviews/MyReview.jsx

'use client'

import Like from "./like"

export default function MyReview() {
        return <>
        <Like></Like>
    </>
}
src/app/myreviews/like.jsx
// 'use client'
import { useState } from "react"

export default function Like() {
    //declare state
    const [like, setLike] = useState(0)

    const onLike = () => {
        setLike(like + 1)
    }

    return <div>
        <h3>Like {like}</h3>
        <button onClick={onLike}>Like</button>
    </div>
}

Note:
 if client component uses another client component, that another client component no need to use "use client" directive.
This would be very use full when we use third party ui components into next js...
primiarly used for migration...
....................................................................................





